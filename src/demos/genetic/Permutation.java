package demos.genetic;

import libai.genetics.chromosomes.IntegerChromosome;
import libai.genetics.chromosomes.Chromosome;
import libai.genetics.Fitness;
import libai.genetics.Engine;

/**
 *
 * @author kronenthaler
 */
public class Permutation extends javax.swing.JPanel implements Fitness {
	/**
	 * Creates new form Permutation
	 */
	public Permutation() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();

        jTextPane1.setText("Evolve a population of permutation chromosomes to approximate the function F(x) < F(x+1), ie, sort the positions in ascending order.\nThe evolving algorithm uses the roulette selection method and elitism. The pm = 0.01 and the pc = 0.6, with a population of 200 individuals.\nThe best chromosome is showed and the fitness for that chromosome.\n");
        jScrollPane1.setViewportView(jTextPane1);

        jProgressBar1.setString("evolving");
        jProgressBar1.setStringPainted(true);

        jButton1.setText("Evolve");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jProgressBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		jTextPane1.setText("");
		final Fitness me = this;
		new Thread(new Runnable() {
			public void run() {
				Engine engine = new Engine(IntegerChromosome.class, 200, 10, 0.6, 0.01, me);
				engine.setProgressBar(jProgressBar1);
				IntegerChromosome best = (IntegerChromosome) engine.evolve(2000);

				jTextPane1.setText(jTextPane1.getText() + "Best Chromosome: " + best + "\n");
				int[] g = best.getGenes();
				for (int i = 0; i < g.length; i++) {
					jTextPane1.setText(jTextPane1.getText() + g[i] + " ");
				}
				jTextPane1.setText(jTextPane1.getText() + "\nNumber of wrong positions: " + fitness(best));
			}
		}).start();
}//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

	public double fitness(Chromosome c1) {
		IntegerChromosome c = (IntegerChromosome) c1;
		int g[] = c.getGenes();
		int count = g.length;
		for (int i = 0; i < g.length; i++) {
			if (g[i] == i)
				count--;
		}
		return count;
	}

	public boolean isBetter(double fitness, double best) {
		return fitness < best;
	}

	public double theWorst() {
		return Double.MAX_VALUE;
	}
}
